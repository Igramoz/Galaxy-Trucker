
//ALGORITMO PER DISTRUGGERE LA NAVE
public class GalaxyTrucker {
    
    // Metodo per trovare tutti i componenti raggiungibili partendo dalla cabina
    public static Set<String> trovaComponentiRaggiungibili(Map<String, List<String>> grafo, String cabina) {
        Set<String> visitati = new HashSet<>();
        Queue<String> coda = new LinkedList<>();
        coda.add(cabina);
        
        while (!coda.isEmpty()) {
            String nodo = coda.poll();
            if (!visitati.contains(nodo)) {
                visitati.add(nodo);
                List<String> vicini = grafo.get(nodo);
                if (vicini != null) {
                    for (String vicino : vicini) {
                        if (!visitati.contains(vicino)) {
                            coda.add(vicino);
                        }
                    }
                }
            }
        }
        return visitati;
    }
    
    // Metodo per aggiornare il grafo rimuovendo il componente distrutto e i relativi collegamenti
    public static Map<String, List<String>> aggiornaGrafo(Map<String, List<String>> grafo, String componenteDistrutto) {
        Map<String, List<String>> grafoAggiornato = new HashMap<>();
        
        for (Map.Entry<String, List<String>> entry : grafo.entrySet()) {
            String nodo = entry.getKey();
            // Salta il nodo da distruggere
            if (nodo.equals(componenteDistrutto)) {
                continue;
            }
            
            // Rimuovi il componente distrutto dalla lista dei vicini
            List<String> viciniAggiornati = new ArrayList<>();
            for (String vicino : entry.getValue()) {
                if (!vicino.equals(componenteDistrutto)) {
                    viciniAggiornati.add(vicino);
                }
            }
            grafoAggiornato.put(nodo, viciniAggiornati);
        }
        return grafoAggiornato;
    }
    
    public static void main(String[] args) {
        // Esempio di grafo: ogni componente è collegato ad altri tramite tubi.
        // In questo esempio il grafo è bidirezionale, quindi ogni collegamento va in entrambe le direzioni.
        Map<String, List<String>> grafo = new HashMap<>();
        grafo.put("cabina", new ArrayList<>(Arrays.asList("A", "B")));
        grafo.put("A", new ArrayList<>(Arrays.asList("cabina", "C")));
        grafo.put("B", new ArrayList<>(Arrays.asList("cabina", "C")));
        grafo.put("C", new ArrayList<>(Arrays.asList("A", "B", "D")));
        grafo.put("D", new ArrayList<>(Arrays.asList("C")));
        
        // Supponiamo di distruggere il componente "B"
        String componenteDistrutto = "B";
        Map<String, List<String>> grafoAggiornato = aggiornaGrafo(grafo, componenteDistrutto);
        
        // A partire dalla cabina, determiniamo quali componenti sono ancora collegati
        Set<String> componentiVivi = trovaComponentiRaggiungibili(grafoAggiornato, "cabina");
        
        // I componenti non raggiungibili dalla cabina (esclusa la cabina stessa) vanno distrutti
        System.out.println("Componenti vivi: " + componentiVivi);
    }

}
//FINE ALGORITMO PER DISTRUGGERE NAVE





